*****************数据结构与算法
数据结构是对基本数据类型的封装，指数据对象中数据元素之间的关系和组织方式

数据结构只是静态地描述了数据元素之间的关系
高效的程序需要在数据结构的基础上设计和选择算法
程序 = 数据结构 + 算法
算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体


************抽象数据类型
抽象数据类型（ADT）是指一个数学模型以及定义在此数学模型上的一组操作，即把数据类型和数据类型上的运算捆在一起，进行封装。


****************python内置的数据结构
python中使用list来表示数组，是一个动态数组，支持不同类型元素的存储。

dict比较list有以下特点：
查找和插入的速度极快，不会随着key的增加而变慢；
需要占用大量的内存，内存浪费多。

而list相反：
查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。

所以，dict是用空间来换取时间的一种方法。
dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。






****************数组与链表
数组：线性结构，即指在数据有限集合中，每个数据元素都有一个确定的位置。一般存放同类型的元素，在物理存储上他们连续存放。

链表：线性结构。与数组不同的时，链表中每个元素也称之为节点(Node)，它的物理位置并不一定与它的前驱或者后继相邻，可以在其他任意位置，只要有一种线索将每个元素串起来，形成这个线性结构即可。这个线索，就是每个节点的地址，习惯上称之为指针。


数组与链表的比较：
比较项目	                      Array	                                   LinkList

元素访问	                  O(1) 随机访问	                O(n) 需要遍历

头部添加/删除	  O(n) 因为需要移动其他元素	O(1) 修改指针即可

尾部添加/删除	  O(1)-尾部添加时摊销O(1)	O(1)-有尾指针的链表中O(1)

任意位置添加/删除	  O(n)-移动元素开销	                O(n)-遍历指针开销

额外空间	                  O(n)-数组空间预分配，浪费的空间在于没有实际使用的空间	O(n)-存储指针而消耗的空间

空间限制	                  连续的空间，特殊情况下容易不足	不需要连续空间


链表的优势在于:


1)不用提前估算空间，空间也不需要预分配

2)在删除结点和添加结点时比数组快(删除元素时，数组需要移动元素，这开销远比链表遍历指针大，虽然二者复杂度都为O(n))。

3）可以有效利用碎片的内存空间
链表的劣势在于:


1)不能随机访问，除了头尾结点外只能顺序遍历。
2) 存储指针也将带来额外开销。


数组的优势在于:支持随机访问 可以使用索引访问；劣势在于要求实现预分配空间，通常分配的空间比使用的多，当内存溢出时，需要重新获取新的内存空间，而且必须使用连续内存，在内存碎片情况下，可能无法继续扩大。




























